// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: product.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
  product_name,
  price
) VALUES (
  $1, $2
) RETURNING id, product_name, price, product_image
`

type CreateProductParams struct {
	ProductName string `json:"product_name"`
	Price       int32  `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.ProductName, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.ProductImage,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProducts = `-- name: GetProducts :one
SELECT id, product_name, price, product_image FROM products
WHERE id = $1
`

func (q *Queries) GetProducts(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProducts, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.ProductImage,
	)
	return i, err
}

const listProduct = `-- name: ListProduct :many
SELECT id, product_name, price, product_image FROM products
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListProductParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListProduct(ctx context.Context, arg ListProductParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProduct, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.ProductName,
			&i.Price,
			&i.ProductImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET product_name = $1,
    price = $2,
    product_image = $3
WHERE id = $4
RETURNING id, product_name, price, product_image
`

type UpdateProductParams struct {
	ProductName  string         `json:"product_name"`
	Price        int32          `json:"price"`
	ProductImage sql.NullString `json:"product_image"`
	ID           int64          `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.ProductName,
		arg.Price,
		arg.ProductImage,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.ProductName,
		&i.Price,
		&i.ProductImage,
	)
	return i, err
}
