// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.0
// source: order.sql

package db

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  id,
  username,
  customer_id,
  total_price,
  cash,
  return
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, username, customer_id, created_at, total_price, cash, return
`

type CreateOrderParams struct {
	ID         int64  `json:"id"`
	Username   string `json:"username"`
	CustomerID int32  `json:"customer_id"`
	TotalPrice int32  `json:"total_price"`
	Cash       int32  `json:"cash"`
	Return     int32  `json:"return"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.Username,
		arg.CustomerID,
		arg.TotalPrice,
		arg.Cash,
		arg.Return,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.CustomerID,
		&i.CreatedAt,
		&i.TotalPrice,
		&i.Cash,
		&i.Return,
	)
	return i, err
}

const listOrder = `-- name: ListOrder :many
SELECT id, username, customer_id, created_at, total_price, cash, return FROM orders
WHERE username = $1
ORDER BY id
`

func (q *Queries) ListOrder(ctx context.Context, username string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrder, username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.CustomerID,
			&i.CreatedAt,
			&i.TotalPrice,
			&i.Cash,
			&i.Return,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
